from django.shortcuts import redirect, render
from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from datetime import date
import calendarAPI as api

# Create your views here.

@require_http_methods(["GET"])
def home(request):
    if request.session.has_key("username"):
        events = api.getAllEvents(request.session["username"])
        calendars = api.getAllCalendars(request.session["username"])
        if request.session["username"] == "test":
            context = {
                "username" : request.session["username"],
                "calendars" : ["No Calendars yet"],
                "events" : [ {"name": "No Events yet", "date":"", "time":""}]
            }
        else:
            context = {
                "username" : request.session["username"],
                "calendars" : sorted(calendars),
                "events" : sorted(events)
            }
        return render(request, 'Calendar/calendar.html', context)
    else:
        context = {}
        return render(request, 'Calendar/signin.html', context)


@require_http_methods(["POST"])
def signin(request):
    if request.POST.has_key("username") and request.POST.has_key("password"):
        username = request.POST["username"]
        password = request.POST["password"]
    
        res = api.login(username, password)

        if res is not False:
            request.session["username"] = username
            return redirect('Calendar:home')
        else:
            return HttpResponse("Bad username/password combo")

    else:
        return HttpResponse("Bad request")

                    
@require_http_methods(["POST"])
def signup(request):
    if request.POST.has_key("username") and request.POST.has_key("password") and request.POST.has_key("password2"):
        username = request.POST["username"]
        password = request.POST["password"]
        password2 = request.POST["password2"]
        
        if password == password2:
            res = api.registerUser(username, password, username)
	    if res is False:
                return HttpResponse("Username already exists")
            else:
                request.session["username"] = username
        else:
            return HttpResponse("passwords must match")
        
        return redirect('Calendar:home')
    
    else:
        return HttpResponse("Bad request")

@require_http_methods(["GET"])
def signout(request):
    if request.session.has_key("username"):
        del request.session["username"]
    return redirect('Calendar:home')

def edit_event(request):
    if request.POST.has_key("id") and request.POST.has_key("field") and request.POST.has_key("value"):
        field = request.POST["field"]
        value = request.POST["value"]
        evID = int(request.POST["id"])
        print api.editEvent(evID, field, value)
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")

@require_http_methods(["POST"])
def add_to_calendar(request):
    if request.POST.has_key("id") and request.POST.has_key("user"):
        user = request.POST["user"]
        calID = request.POST["id"]
        api.addUserToCalendar(calID, request.session["username"], user)
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")

@require_http_methods(["POST"])
def new_calendar(request):
    if request.POST.has_key("name"):
        name = request.POST["name"]
        api.createCalendar(name, request.session["username"])
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")

@require_http_methods(["POST"])
def new_event(request):
    if request.POST.has_key("name") and request.POST.has_key("startTime") and request.POST.has_key("endTime") and request.POST.has_key("location") and request.POST.has_key("id"):
        name = request.POST["name"]
        startTime = request.POST["startTime"]
        endTime = request.POST["endTime"]
        location = request.POST["location"]
        calID = int(request.POST["id"])
        print api.createEvent(calID, request.session["username"],name,startTime,endTime,location,"")
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")

@require_http_methods(["POST"])
def del_event(request):
    if request.POST.has_key("id"):
        evID = int(request.POST["id"])
        api.deleteEvent(evID)
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")

@require_http_methods(["GET"])
def cal_viewers(request, cid, cname):
    context = {
        "username" : request.session["username"],
        "viewers" : api.getCalendarViewers(int(cid)),
        "calendar" : cname
    }
    return render(request, 'Calendar/viewers.html', context)

@require_http_methods(["POST"])
def del_viewer(request):
    if request.POST.has_key("id") and request.POST.has_key("calName") :
        viewID = request.POST["id"]
        calName = request.POST["calName"]
        api.deleteEvent(calName, request.session["username"], viewID)
        return redirect('Calendar:home')
    return HttpResponse("Bad Request")
